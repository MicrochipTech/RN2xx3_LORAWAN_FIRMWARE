Version 3.2 HI-TECH Software Intermediate Code
"8 C:\Program Files (x86)\Microchip\xc8\v1.45\include\ctype.h
[v _isxdigit `(b ~T0 @X0 0 ef1`uc ]
"56 C:\Program Files (x86)\Microchip\xc8\v1.45\include\string.h
[v _strlen `(ui ~T0 @X0 0 ef1`*Cuc ]
"56 C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h
[v _xtoi `(ui ~T0 @X0 0 ef1`*Cuc ]
"95
[v _itoa `(*uc ~T0 @X0 0 ef3`*uc`i`i ]
"55
[v _atoi `(i ~T0 @X0 0 ef1`*Cuc ]
"7 C:\Program Files (x86)\Microchip\xc8\v1.45\include\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"58 C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h
[v _strtol `(l ~T0 @X0 0 ef3`*Cuc`**uc`i ]
"102
[v _ultoa `(*uc ~T0 @X0 0 ef3`*uc`ul`i ]
"45 C:\Program Files (x86)\Microchip\xc8\v1.45\include\string.h
[v _strcmp `(i ~T0 @X0 0 ef2`*Cuc`*Cuc ]
"46
[v _stricmp `(i ~T0 @X0 0 ef2`*Cuc`*Cuc ]
"47
[v _strncmp `(i ~T0 @X0 0 ef3`*Cuc`*Cuc`ui ]
[; ;__size_t.h: 4: typedef unsigned size_t;
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 53: extern double atof(const char *);
[; ;stdlib.h: 54: extern double strtod(const char *, const char **);
[; ;stdlib.h: 55: extern int atoi(const char *);
[; ;stdlib.h: 56: extern unsigned xtoi(const char *);
[; ;stdlib.h: 57: extern long atol(const char *);
[; ;stdlib.h: 58: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 60: extern int rand(void);
[; ;stdlib.h: 61: extern void srand(unsigned int);
[; ;stdlib.h: 62: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 63: extern div_t div(int numer, int denom);
[; ;stdlib.h: 64: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 65: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 66: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 67: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 68: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 69: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 70: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 75: extern void * malloc(size_t);
[; ;stdlib.h: 76: extern void free(void *);
[; ;stdlib.h: 77: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 86: extern int atexit(void (*)(void));
[; ;stdlib.h: 87: extern char * getenv(const char *);
[; ;stdlib.h: 88: extern char ** environ;
[; ;stdlib.h: 89: extern int system(char *);
[; ;stdlib.h: 90: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 91: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 92: extern int abs(int);
[; ;stdlib.h: 93: extern long labs(long);
[; ;stdlib.h: 95: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 96: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 101: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 102: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 104: extern char * ftoa(float f, int * status);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;parser_utils.h: 47: bool Validate_HexValue(void* pValue);
[; ;parser_utils.h: 49: uint8_t Parser_HexAsciiToInt(uint16_t hexAsciiLen, char* pInHexAscii, uint8_t* pOutInt);
[; ;parser_utils.h: 51: void Parser_IntArrayToHexAscii(uint8_t arrayLen, uint8_t* pInArray, uint8_t* pOutHexAscii);
[; ;parser_utils.h: 52: bool Validate_Uint8DecAsciiValue(void* pValue, uint8_t* pDecValue);
[; ;parser_utils.h: 53: bool Validate_UintDecAsciiValue(void* pValue, uint8_t DigitsNb, uint32_t maxValue);
[; ;parser_utils.h: 54: uint8_t Validate_OnOffAsciiValue(void* pValue);
[; ;parser_utils.h: 55: uint8_t Validate_Str1Str2AsciiValue(void* pValue, void* pStr1, void* pStr2);
[; ;parser_utils.h: 56: int8_t Pin_Index(char* pinName);
"50 parser/parser_utils.c
[v _gapParseOnOff `*Cuc ~T0 @X0 -> 0 `x s ]
[i _gapParseOnOff
:U ..
"52
:s 1C
"53
:s 2C
..
]
[; ;parser_utils.c: 50: static const char* gapParseOnOff[] =
[; ;parser_utils.c: 51: {
[; ;parser_utils.c: 52: {"off"},
[; ;parser_utils.c: 53: {"on"}
[; ;parser_utils.c: 54: };
"56
[v _Validate_HexValue `(uc ~T0 @X0 1 ef1`*v ]
"57
{
[; ;parser_utils.c: 56: bool Validate_HexValue(void* pValue)
[; ;parser_utils.c: 57: {
[e :U _Validate_HexValue ]
"56
[v _pValue `*v ~T0 @X0 1 r1 ]
"57
[f ]
"58
[v _flag `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 58: bool flag = 1;
[e = _flag -> -> 1 `i `uc ]
"59
[v _character `*uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 59: char* character;
[; ;parser_utils.c: 61: for(character = pValue; *character; character++)
"61
{
[e = _character -> _pValue `*uc ]
[e $U 9  ]
"62
[e :U 6 ]
[; ;parser_utils.c: 62: {
{
[; ;parser_utils.c: 63: if(isxdigit(*character) == 0)
"63
[e $ ! == -> ( _isxdigit (1 *U _character `i -> 0 `i 10  ]
[; ;parser_utils.c: 64: {
"64
{
[; ;parser_utils.c: 65: flag = 0;
"65
[e = _flag -> -> 0 `i `uc ]
[; ;parser_utils.c: 66: break;
"66
[e $U 7  ]
"67
}
[e :U 10 ]
"68
}
"61
[e ++ _character * -> -> 1 `i `x -> -> # *U _character `i `x ]
[e :U 9 ]
[e $ != -> *U _character `i -> -> -> 0 `i `uc `i 6  ]
[e :U 7 ]
"68
}
[; ;parser_utils.c: 67: }
[; ;parser_utils.c: 68: }
[; ;parser_utils.c: 70: return flag;
"70
[e ) _flag ]
[e $UE 5  ]
[; ;parser_utils.c: 71: }
"71
[e :UE 5 ]
}
"73
[v _Parser_HexAsciiToInt `(uc ~T0 @X0 1 ef3`ui`*uc`*uc ]
"74
{
[; ;parser_utils.c: 73: uint8_t Parser_HexAsciiToInt(uint16_t hexAsciiLen, char* pInHexAscii, uint8_t* pOutInt)
[; ;parser_utils.c: 74: {
[e :U _Parser_HexAsciiToInt ]
"73
[v _hexAsciiLen `ui ~T0 @X0 1 r1 ]
[v _pInHexAscii `*uc ~T0 @X0 1 r2 ]
[v _pOutInt `*uc ~T0 @X0 1 r3 ]
"74
[f ]
"75
[v _rxHexAsciiLen `ui ~T0 @X0 1 a ]
[; ;parser_utils.c: 75: uint16_t rxHexAsciiLen = strlen(pInHexAscii);
[e = _rxHexAsciiLen ( _strlen (1 -> _pInHexAscii `*Cuc ]
"76
[v _iCtr `ui ~T0 @X0 1 a ]
[; ;parser_utils.c: 76: uint16_t iCtr = 0;
[e = _iCtr -> -> 0 `i `ui ]
"77
[v _jCtr `ui ~T0 @X0 1 a ]
[; ;parser_utils.c: 77: uint16_t jCtr = rxHexAsciiLen >> 1;
[e = _jCtr >> _rxHexAsciiLen -> 1 `i ]
"78
[v _retValue `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 78: uint8_t retValue = 0;
[e = _retValue -> -> 0 `i `uc ]
"79
[v _tempBuff `uc ~T0 @X0 -> 3 `i a ]
[; ;parser_utils.c: 79: char tempBuff[3];
[; ;parser_utils.c: 81: if(rxHexAsciiLen % 2 == 0)
"81
[e $ ! == % _rxHexAsciiLen -> -> 2 `i `ui -> -> 0 `i `ui 12  ]
[; ;parser_utils.c: 82: {
"82
{
[; ;parser_utils.c: 83: jCtr --;
"83
[e -- _jCtr -> -> 1 `i `ui ]
"84
}
[e :U 12 ]
[; ;parser_utils.c: 84: }
[; ;parser_utils.c: 86: if(hexAsciiLen == rxHexAsciiLen)
"86
[e $ ! == _hexAsciiLen _rxHexAsciiLen 13  ]
[; ;parser_utils.c: 87: {
"87
{
[; ;parser_utils.c: 88: while(rxHexAsciiLen > 0)
"88
[e $U 14  ]
[e :U 15 ]
[; ;parser_utils.c: 89: {
"89
{
[; ;parser_utils.c: 90: if(rxHexAsciiLen >= 2U)
"90
[e $ ! >= _rxHexAsciiLen -> 2 `ui 17  ]
[; ;parser_utils.c: 91: {
"91
{
[; ;parser_utils.c: 92: tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
"92
[e = *U + &U _tempBuff * -> _iCtr `ux -> -> # *U &U _tempBuff `ui `ux *U + _pInHexAscii * -> - _rxHexAsciiLen -> -> 2 `i `ui `ux -> -> # *U _pInHexAscii `ui `ux ]
[; ;parser_utils.c: 93: iCtr ++;
"93
[e ++ _iCtr -> -> 1 `i `ui ]
[; ;parser_utils.c: 94: tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
"94
[e = *U + &U _tempBuff * -> _iCtr `ux -> -> # *U &U _tempBuff `ui `ux *U + _pInHexAscii * -> - _rxHexAsciiLen -> -> 1 `i `ui `ux -> -> # *U _pInHexAscii `ui `ux ]
[; ;parser_utils.c: 96: rxHexAsciiLen -= 2U;
"96
[e =- _rxHexAsciiLen -> 2 `ui ]
"97
}
[; ;parser_utils.c: 97: }
[e $U 18  ]
"98
[e :U 17 ]
[; ;parser_utils.c: 98: else
[; ;parser_utils.c: 99: {
"99
{
[; ;parser_utils.c: 100: tempBuff[iCtr] = '0';
"100
[e = *U + &U _tempBuff * -> _iCtr `ux -> -> # *U &U _tempBuff `ui `ux -> -> 48 `ui `uc ]
[; ;parser_utils.c: 101: iCtr ++;
"101
[e ++ _iCtr -> -> 1 `i `ui ]
[; ;parser_utils.c: 102: tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
"102
[e = *U + &U _tempBuff * -> _iCtr `ux -> -> # *U &U _tempBuff `ui `ux *U + _pInHexAscii * -> - _rxHexAsciiLen -> -> 1 `i `ui `ux -> -> # *U _pInHexAscii `ui `ux ]
[; ;parser_utils.c: 104: rxHexAsciiLen --;
"104
[e -- _rxHexAsciiLen -> -> 1 `i `ui ]
"105
}
[e :U 18 ]
[; ;parser_utils.c: 105: }
[; ;parser_utils.c: 107: iCtr ++;
"107
[e ++ _iCtr -> -> 1 `i `ui ]
[; ;parser_utils.c: 108: tempBuff[iCtr] = '\0';
"108
[e = *U + &U _tempBuff * -> _iCtr `ux -> -> # *U &U _tempBuff `ui `ux -> -> 0 `ui `uc ]
[; ;parser_utils.c: 109: *(pOutInt + jCtr) = xtoi(tempBuff);
"109
[e = *U + _pOutInt * -> _jCtr `ux -> -> # *U _pOutInt `ui `ux -> ( _xtoi (1 -> &U _tempBuff `*Cuc `uc ]
[; ;parser_utils.c: 111: iCtr = 0;
"111
[e = _iCtr -> -> 0 `i `ui ]
[; ;parser_utils.c: 112: jCtr --;
"112
[e -- _jCtr -> -> 1 `i `ui ]
"113
}
[e :U 14 ]
"88
[e $ > _rxHexAsciiLen -> -> 0 `i `ui 15  ]
[e :U 16 ]
[; ;parser_utils.c: 113: }
[; ;parser_utils.c: 115: retValue = 1;
"115
[e = _retValue -> -> 1 `i `uc ]
"116
}
[e :U 13 ]
[; ;parser_utils.c: 116: }
[; ;parser_utils.c: 118: return retValue;
"118
[e ) _retValue ]
[e $UE 11  ]
[; ;parser_utils.c: 119: }
"119
[e :UE 11 ]
}
"121
[v _Parser_IntArrayToHexAscii `(v ~T0 @X0 1 ef3`uc`*uc`*uc ]
"122
{
[; ;parser_utils.c: 121: void Parser_IntArrayToHexAscii(uint8_t arrayLen, uint8_t* pInArray, uint8_t* pOutHexAscii)
[; ;parser_utils.c: 122: {
[e :U _Parser_IntArrayToHexAscii ]
"121
[v _arrayLen `uc ~T0 @X0 1 r1 ]
[v _pInArray `*uc ~T0 @X0 1 r2 ]
[v _pOutHexAscii `*uc ~T0 @X0 1 r3 ]
"122
[f ]
"123
[v _iCtr `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 123: uint8_t iCtr = 0U;
[e = _iCtr -> -> 0 `ui `uc ]
[; ;parser_utils.c: 125: for(iCtr = 0; iCtr < arrayLen; iCtr ++)
"125
{
[e = _iCtr -> -> 0 `i `uc ]
[e $U 23  ]
"126
[e :U 20 ]
[; ;parser_utils.c: 126: {
{
[; ;parser_utils.c: 127: itoa(&pOutHexAscii[iCtr << 1], pInArray[iCtr], 16);
"127
[e ( _itoa (3 , , &U *U + _pOutHexAscii * -> << -> _iCtr `i -> 1 `i `x -> -> # *U _pOutHexAscii `i `x -> *U + _pInArray * -> _iCtr `ux -> -> # *U _pInArray `ui `ux `i -> 16 `i ]
[; ;parser_utils.c: 129: if(pInArray[iCtr] <= 15)
"129
[e $ ! <= -> *U + _pInArray * -> _iCtr `ux -> -> # *U _pInArray `ui `ux `i -> 15 `i 24  ]
[; ;parser_utils.c: 130: {
"130
{
[; ;parser_utils.c: 132: pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
"132
[e = *U + _pOutHexAscii * -> + << -> _iCtr `i -> 1 `i -> 1 `i `x -> -> # *U _pOutHexAscii `i `x *U + _pOutHexAscii * -> << -> _iCtr `i -> 1 `i `x -> -> # *U _pOutHexAscii `i `x ]
[; ;parser_utils.c: 133: pOutHexAscii[iCtr << 1] = '0';
"133
[e = *U + _pOutHexAscii * -> << -> _iCtr `i -> 1 `i `x -> -> # *U _pOutHexAscii `i `x -> -> 48 `ui `uc ]
"134
}
[e :U 24 ]
"135
}
"125
[e ++ _iCtr -> -> 1 `i `uc ]
[e :U 23 ]
[e $ < -> _iCtr `i -> _arrayLen `i 20  ]
[e :U 21 ]
"135
}
[; ;parser_utils.c: 134: }
[; ;parser_utils.c: 135: }
[; ;parser_utils.c: 137: pOutHexAscii[(iCtr << 1)] = '\0';
"137
[e = *U + _pOutHexAscii * -> << -> _iCtr `i -> 1 `i `x -> -> # *U _pOutHexAscii `i `x -> -> 0 `ui `uc ]
[; ;parser_utils.c: 138: }
"138
[e :UE 19 ]
}
"140
[v _Validate_Uint8DecAsciiValue `(uc ~T0 @X0 1 ef2`*v`*uc ]
"141
{
[; ;parser_utils.c: 140: bool Validate_Uint8DecAsciiValue(void* pValue, uint8_t* pDecValue)
[; ;parser_utils.c: 141: {
[e :U _Validate_Uint8DecAsciiValue ]
"140
[v _pValue `*v ~T0 @X0 1 r1 ]
[v _pDecValue `*uc ~T0 @X0 1 r2 ]
"141
[f ]
"142
[v _flag `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 142: bool flag = 0;
[e = _flag -> -> 0 `i `uc ]
"143
[v _character `*uc ~T0 @X0 1 a ]
"144
[v _valueLen `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 143: char* character;
[; ;parser_utils.c: 144: uint8_t valueLen = strlen(pValue);
[e = _valueLen -> ( _strlen (1 -> _pValue `*Cuc `uc ]
"145
[v _value `i ~T0 @X0 1 a ]
[; ;parser_utils.c: 145: int16_t value = atoi(pValue);
[e = _value ( _atoi (1 -> _pValue `*Cuc ]
[; ;parser_utils.c: 148: if((valueLen <= 3U) && (value >= 0) && (value <= 255))
"148
[e $ ! && && <= -> _valueLen `ui -> 3 `ui >= _value -> 0 `i <= _value -> 255 `i 26  ]
[; ;parser_utils.c: 149: {
"149
{
[; ;parser_utils.c: 150: flag = 1;
"150
[e = _flag -> -> 1 `i `uc ]
[; ;parser_utils.c: 152: for(character = pValue; *character; character++)
"152
{
[e = _character -> _pValue `*uc ]
[e $U 30  ]
"153
[e :U 27 ]
[; ;parser_utils.c: 153: {
{
[; ;parser_utils.c: 154: if(isdigit(*character) == 0)
"154
[e $ ! == -> ( _isdigit (1 *U _character `i -> 0 `i 31  ]
[; ;parser_utils.c: 155: {
"155
{
[; ;parser_utils.c: 156: flag = 0;
"156
[e = _flag -> -> 0 `i `uc ]
[; ;parser_utils.c: 157: break;
"157
[e $U 28  ]
"158
}
[e :U 31 ]
"159
}
"152
[e ++ _character * -> -> 1 `i `x -> -> # *U _character `i `x ]
[e :U 30 ]
[e $ != -> *U _character `i -> -> -> 0 `i `uc `i 27  ]
[e :U 28 ]
"159
}
"160
}
[e :U 26 ]
[; ;parser_utils.c: 158: }
[; ;parser_utils.c: 159: }
[; ;parser_utils.c: 160: }
[; ;parser_utils.c: 162: if(flag)
"162
[e $ ! != -> _flag `i -> -> -> 0 `i `uc `i 32  ]
[; ;parser_utils.c: 163: {
"163
{
[; ;parser_utils.c: 164: *pDecValue = (uint8_t)value;
"164
[e = *U _pDecValue -> _value `uc ]
"165
}
[e :U 32 ]
[; ;parser_utils.c: 165: }
[; ;parser_utils.c: 167: return flag;
"167
[e ) _flag ]
[e $UE 25  ]
[; ;parser_utils.c: 168: }
"168
[e :UE 25 ]
}
"195
[v _Validate_UintDecAsciiValue `(uc ~T0 @X0 1 ef3`*v`uc`ul ]
"196
{
[; ;parser_utils.c: 195: bool Validate_UintDecAsciiValue(void* pValue, uint8_t DigitsNb, uint32_t maxValue)
[; ;parser_utils.c: 196: {
[e :U _Validate_UintDecAsciiValue ]
"195
[v _pValue `*v ~T0 @X0 1 r1 ]
[v _DigitsNb `uc ~T0 @X0 1 r2 ]
[v _maxValue `ul ~T0 @X0 1 r3 ]
"196
[f ]
"197
[v _flag `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 197: bool flag = 0;
[e = _flag -> -> 0 `i `uc ]
"198
[v _buf `uc ~T0 @X0 -> 11 `i a ]
"199
[v _value `ul ~T0 @X0 1 a ]
[; ;parser_utils.c: 198: uint8_t buf[11];
[; ;parser_utils.c: 199: uint32_t value = ((unsigned long)strtol((pValue),((0)),(10)));
[e = _value -> ( _strtol (3 , , -> _pValue `*Cuc -> -> 0 `i `**uc -> 10 `i `ul ]
[; ;parser_utils.c: 201: ultoa(buf, value, 10U);
"201
[e ( _ultoa (3 , , &U _buf _value -> -> 10 `ui `i ]
[; ;parser_utils.c: 203: flag = 1;
"203
[e = _flag -> -> 1 `i `uc ]
[; ;parser_utils.c: 205: if (0 != strcmp((uint8_t*)pValue, buf))
"205
[e $ ! != -> 0 `i ( _strcmp (2 , -> -> _pValue `*uc `*Cuc -> &U _buf `*Cuc 34  ]
[; ;parser_utils.c: 206: {
"206
{
[; ;parser_utils.c: 207: flag = 0;
"207
[e = _flag -> -> 0 `i `uc ]
"208
}
[e :U 34 ]
[; ;parser_utils.c: 208: }
[; ;parser_utils.c: 210: if (value > maxValue)
"210
[e $ ! > _value _maxValue 35  ]
[; ;parser_utils.c: 211: {
"211
{
[; ;parser_utils.c: 212: flag = 0;
"212
[e = _flag -> -> 0 `i `uc ]
"213
}
[e :U 35 ]
[; ;parser_utils.c: 213: }
[; ;parser_utils.c: 215: return flag;
"215
[e ) _flag ]
[e $UE 33  ]
[; ;parser_utils.c: 216: }
"216
[e :UE 33 ]
}
"222
[v _Validate_OnOffAsciiValue `(uc ~T0 @X0 1 ef1`*v ]
"223
{
[; ;parser_utils.c: 222: uint8_t Validate_OnOffAsciiValue(void* pValue)
[; ;parser_utils.c: 223: {
[e :U _Validate_OnOffAsciiValue ]
"222
[v _pValue `*v ~T0 @X0 1 r1 ]
"223
[f ]
"224
[v _result `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 224: uint8_t result = 2U;
[e = _result -> -> 2 `ui `uc ]
[; ;parser_utils.c: 226: if(0U == stricmp(pValue, gapParseOnOff[0U]))
"226
[e $ ! == -> 0 `ui -> ( _stricmp (2 , -> _pValue `*Cuc *U + &U _gapParseOnOff * -> -> 0 `ui `ux -> -> # *U &U _gapParseOnOff `ui `ux `ui 37  ]
[; ;parser_utils.c: 227: {
"227
{
[; ;parser_utils.c: 228: result = 0U;
"228
[e = _result -> -> 0 `ui `uc ]
"229
}
[; ;parser_utils.c: 229: }
[e $U 38  ]
"230
[e :U 37 ]
[; ;parser_utils.c: 230: else if (0U == stricmp(pValue, gapParseOnOff[1U]))
[e $ ! == -> 0 `ui -> ( _stricmp (2 , -> _pValue `*Cuc *U + &U _gapParseOnOff * -> -> 1 `ui `ux -> -> # *U &U _gapParseOnOff `ui `ux `ui 39  ]
[; ;parser_utils.c: 231: {
"231
{
[; ;parser_utils.c: 232: result = 1U;
"232
[e = _result -> -> 1 `ui `uc ]
"233
}
[e :U 39 ]
"235
[e :U 38 ]
[; ;parser_utils.c: 233: }
[; ;parser_utils.c: 235: return result;
[e ) _result ]
[e $UE 36  ]
[; ;parser_utils.c: 236: }
"236
[e :UE 36 ]
}
"242
[v _Validate_Str1Str2AsciiValue `(uc ~T0 @X0 1 ef3`*v`*v`*v ]
"243
{
[; ;parser_utils.c: 242: uint8_t Validate_Str1Str2AsciiValue(void* pValue, void* pStr1, void* pStr2)
[; ;parser_utils.c: 243: {
[e :U _Validate_Str1Str2AsciiValue ]
"242
[v _pValue `*v ~T0 @X0 1 r1 ]
[v _pStr1 `*v ~T0 @X0 1 r2 ]
[v _pStr2 `*v ~T0 @X0 1 r3 ]
"243
[f ]
"244
[v _result `uc ~T0 @X0 1 a ]
[; ;parser_utils.c: 244: uint8_t result = 2U;
[e = _result -> -> 2 `ui `uc ]
[; ;parser_utils.c: 246: if(0U == stricmp(pValue, pStr1))
"246
[e $ ! == -> 0 `ui -> ( _stricmp (2 , -> _pValue `*Cuc -> _pStr1 `*Cuc `ui 41  ]
[; ;parser_utils.c: 247: {
"247
{
[; ;parser_utils.c: 248: result = 0U;
"248
[e = _result -> -> 0 `ui `uc ]
"249
}
[; ;parser_utils.c: 249: }
[e $U 42  ]
"250
[e :U 41 ]
[; ;parser_utils.c: 250: else if (0U == stricmp(pValue, pStr2))
[e $ ! == -> 0 `ui -> ( _stricmp (2 , -> _pValue `*Cuc -> _pStr2 `*Cuc `ui 43  ]
[; ;parser_utils.c: 251: {
"251
{
[; ;parser_utils.c: 252: result = 1U;
"252
[e = _result -> -> 1 `ui `uc ]
"253
}
[e :U 43 ]
"255
[e :U 42 ]
[; ;parser_utils.c: 253: }
[; ;parser_utils.c: 255: return result;
[e ) _result ]
[e $UE 40  ]
[; ;parser_utils.c: 256: }
"256
[e :UE 40 ]
}
"258
[v _Pin_Index `(c ~T0 @X0 1 ef1`*uc ]
"259
{
[; ;parser_utils.c: 258: int8_t Pin_Index(char* pinName)
[; ;parser_utils.c: 259: {
[e :U _Pin_Index ]
"258
[v _pinName `*uc ~T0 @X0 1 r1 ]
"259
[f ]
"260
[v _pinNumber `c ~T0 @X0 1 a ]
[; ;parser_utils.c: 260: int8_t pinNumber = -1;
[e = _pinNumber -> -U -> 1 `i `c ]
[; ;parser_utils.c: 262: if(0 == strncmp(pinName, "GPIO", 4))
"262
[e $ ! == -> 0 `i ( _strncmp (3 , , -> _pinName `*Cuc :s 3C -> -> 4 `i `ui 45  ]
[; ;parser_utils.c: 263: {
"263
{
[; ;parser_utils.c: 264: if(Validate_UintDecAsciiValue(&pinName[4], 2, 13))
"264
[e $ ! != -> ( _Validate_UintDecAsciiValue (3 , , -> &U *U + _pinName * -> -> 4 `i `x -> -> # *U _pinName `i `x `*v -> -> 2 `i `uc -> -> -> 13 `i `l `ul `i -> -> -> 0 `i `uc `i 46  ]
[; ;parser_utils.c: 265: {
"265
{
[; ;parser_utils.c: 266: pinNumber = atoi(&pinName[4]);
"266
[e = _pinNumber -> ( _atoi (1 -> &U *U + _pinName * -> -> 4 `i `x -> -> # *U _pinName `i `x `*Cuc `c ]
"267
}
[e :U 46 ]
"268
}
[; ;parser_utils.c: 267: }
[; ;parser_utils.c: 268: }
[e $U 47  ]
"269
[e :U 45 ]
[; ;parser_utils.c: 269: else if (0 == strcmp(pinName, "UART_RTS"))
[e $ ! == -> 0 `i ( _strcmp (2 , -> _pinName `*Cuc :s 4C 48  ]
[; ;parser_utils.c: 270: {
"270
{
[; ;parser_utils.c: 271: pinNumber = 14;
"271
[e = _pinNumber -> -> 14 `i `c ]
"272
}
[; ;parser_utils.c: 272: }
[e $U 49  ]
"273
[e :U 48 ]
[; ;parser_utils.c: 273: else if (0 == strcmp(pinName, "UART_CTS"))
[e $ ! == -> 0 `i ( _strcmp (2 , -> _pinName `*Cuc :s 5C 50  ]
[; ;parser_utils.c: 274: {
"274
{
[; ;parser_utils.c: 275: pinNumber = 15;
"275
[e = _pinNumber -> -> 15 `i `c ]
"276
}
[; ;parser_utils.c: 276: }
[e $U 51  ]
"277
[e :U 50 ]
[; ;parser_utils.c: 277: else if (0 == strcmp(pinName, "TEST0"))
[e $ ! == -> 0 `i ( _strcmp (2 , -> _pinName `*Cuc :s 6C 52  ]
[; ;parser_utils.c: 278: {
"278
{
[; ;parser_utils.c: 279: pinNumber = 16;
"279
[e = _pinNumber -> -> 16 `i `c ]
"280
}
[; ;parser_utils.c: 280: }
[e $U 53  ]
"281
[e :U 52 ]
[; ;parser_utils.c: 281: else if (0 == strcmp(pinName, "TEST1"))
[e $ ! == -> 0 `i ( _strcmp (2 , -> _pinName `*Cuc :s 7C 54  ]
[; ;parser_utils.c: 282: {
"282
{
[; ;parser_utils.c: 283: pinNumber = 17;
"283
[e = _pinNumber -> -> 17 `i `c ]
"284
}
[e :U 54 ]
"286
[e :U 53 ]
[e :U 51 ]
[e :U 49 ]
[e :U 47 ]
[; ;parser_utils.c: 284: }
[; ;parser_utils.c: 286: return pinNumber;
[e ) _pinNumber ]
[e $UE 44  ]
[; ;parser_utils.c: 287: }
"287
[e :UE 44 ]
}
[a 2C 111 110 0 ]
[a 1C 111 102 102 0 ]
[a 4C 85 65 82 84 95 82 84 83 0 ]
[a 5C 85 65 82 84 95 67 84 83 0 ]
[a 3C 71 80 73 79 0 ]
[a 7C 84 69 83 84 49 0 ]
[a 6C 84 69 83 84 48 0 ]
