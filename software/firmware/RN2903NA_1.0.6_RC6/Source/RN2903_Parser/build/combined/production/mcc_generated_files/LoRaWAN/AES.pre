
# 1 "mcc_generated_files/LoRaWAN/AES.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.45\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 28 "mcc_generated_files/LoRaWAN/AES.h"
void AESEncode(unsigned char* block, unsigned char* key);
void AESDecode(unsigned char* block, unsigned char* key);
void AESCalcDecodeKey(unsigned char* key);

# 48 "mcc_generated_files/LoRaWAN/AES.c"
static unsigned char _roundCounter;
static unsigned char _rcon;




const unsigned char STable[] =
{
0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16
};

# 160
void EncKeySchedule(unsigned char* key)
{

key[0]^=STable[key[13]];
key[1]^=STable[key[14]];
key[2]^=STable[key[15]];
key[3]^=STable[key[12]];

key[0]^=_rcon;
_rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );


key[4]^=key[0];
key[5]^=key[1];
key[6]^=key[2];
key[7]^=key[3];


key[8]^=key[4];
key[9]^=key[5];
key[10]^=key[6];
key[11]^=key[7];


key[12]^=key[8];
key[13]^=key[9];
key[14]^=key[10];
key[15]^=key[11];
}

# 205
void EncodeShiftRow(unsigned char* stateTable)
{
unsigned char temp;




temp=stateTable[1];
stateTable[1]=stateTable[5];
stateTable[5]=stateTable[9];
stateTable[9]=stateTable[13];
stateTable[13]=temp;


temp=stateTable[2];
stateTable[2]=stateTable[10];
stateTable[10]=temp;
temp=stateTable[14];
stateTable[14]=stateTable[6];
stateTable[6]=temp;


temp=stateTable[3];
stateTable[3]=stateTable[15];
stateTable[15]=stateTable[11];
stateTable[11]=stateTable[7];
stateTable[7]=temp;
}



void AESEncode(unsigned char* block, unsigned char* masterKey)
{
unsigned char i;

unsigned char key[16];

for (i = 0; i < 16; i++)
{
key[i] = masterKey[i];
}


_roundCounter = 10;

_rcon = 0x01;


for(i=0;i<16;i++)
{
block[i] ^= key[i];
}

do
{

for(i=0;i<16;i++)
{
block[i]=STable[block[i]];
}


EncodeShiftRow(block);


if(_roundCounter != 1)
{
unsigned char aux,aux1,aux2,aux3;

for(i=0;i<16;i+=4)
{
aux1= block[i+0] ^ block[i+1];
aux3= block[i+2]^block[i+3];
aux = aux1 ^ aux3;
aux2= block[i+2]^block[i+1];

aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );

block[i+0]= aux^aux1^block[i+0];
block[i+1]= aux^aux2^block[i+1];
block[i+2]= aux^aux3^block[i+2];
block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
}
}

EncKeySchedule(key);

for(i=0;i<16;i++)
{
block[i] ^= key[i];
}

_roundCounter--;
}
while(_roundCounter !=0);
}

